package xxup.oracle.apps.per.rim.server;

import java.sql.CallableStatement;
import java.sql.Connection;

import java.sql.SQLException;
import java.sql.Types;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Arrays;

import java.util.HashMap;
import java.util.Map;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.Row;

import oracle.jbo.RowSetIterator;
import oracle.jbo.Transaction;

import xxup.oracle.apps.per.rim.lov.server.RIMDevGoalVOImpl;
import xxup.oracle.apps.per.rim.lov.server.RIMMainAreaIntVOImpl;
import xxup.oracle.apps.per.rim.lov.server.RIMProjectImpactVOImpl;
import xxup.oracle.apps.per.rim.lov.server.RIMProjectStatusVOImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RIMMainAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public RIMMainAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
            /* Configuration Name */launchTester("xxup.oracle.apps.per.rim.server", 
                                                 "RIMMainAMLocal");
    }


    public void initVOForNewRequest() {

        RIMHeaderEOVOImpl mainVO = getRIMHeaderEOVO1();
        mainVO.initNewRecord();
        
        RIMFiscalDetailsEOVOImpl fiscVO = getRIMFiscalDetailsEOVO1();
        fiscVO.initNewRecord();


        RIMTeamMembersEOVOImpl membersVO = getRIMTeamMembersEOVO1();
        membersVO.initNewRecord();


        RIMOtherTeamMembersEOVOImpl otherMembersVO = getRIMOtherTeamMembersEOVO1();
        otherMembersVO.initNewRecord();
        // RIMOtherTeamMembersVOImpl otherMembersVO = getRIMOtherTeamMembersVO1();
        // otherMembersVO.initNewRecord();

        RIMMilestonesEOVOImpl mileVO = getRIMMilestonesEOVO1();
        mileVO.initNewRecord();
        
        RIMFundingEOVOImpl fundVO = getRIMFundingEOVO1();
        fundVO.initNewRecord();

        LoadNewProjectImpactInTable();
        LoadNewMainAreaIntInTable();
        LoadNewDevGoalInTable();


    }

    public void saveDetails(String workflowType){
        /*Main*/
       RIMHeaderEOVOImpl mainVo = getRIMHeaderEOVO1();

       String transactionNo = 
           mainVo.getCurrentRow().getAttribute("TransactionNo").toString();


        Row headerRow = (OAViewRowImpl) mainVo.getCurrentRow();            
        // String transactionNo = "00";
        // //pageContext.writeDiagnostics(this, transactionNo, 1);
        
        if (headerRow != null) {
            Integer lineNumber = 1;
            String itemKey = headerRow.getAttribute("ItemKey").toString();
            // String approvalStatus = headerRow.getAttribute("ApprovalStatus") != null ? headerRow.getAttribute("ApprovalStatus").toString() : "";
            // String workflowType = headerRow.getAttribute("WorkflowType") != null ? headerRow.getAttribute("WorkflowType").toString() : "";
            this.writeDiagnostics(this, "WorkflowType: " + workflowType ,OAFwkConstants.STATEMENT);

            /*Handle Research Type - Others*/
            if(headerRow.getAttribute("ResearchType") != null){
                if("Others".equals(headerRow.getAttribute("ResearchType").toString())){
                    headerRow.setAttribute("ResearchType", headerRow.getAttribute("ResearchTypeOthers").toString());
                }
            }


            String strEndDate = headerRow.getAttribute("EndDate") != null ? headerRow.getAttribute("EndDate").toString() : "";

            /*End Date (Extension)*/
            if(!strEndDate.equals("")) {
              this.writeDiagnostics(this, "saving extension" ,OAFwkConstants.STATEMENT);
              String strValidateExtension = validateExtension();
              if(workflowType.equals(RIMHelper.C_RFC_AC)){
                RIMLatestExtVOImpl edVO = getRIMLatestExtVO1();
                edVO.initExist(itemKey);
                

                if(edVO != null ) {
                  if(edVO.getRowCount() >= 1 ){
                        this.writeDiagnostics(this, "latest date found" ,OAFwkConstants.STATEMENT);
                        Row edRow = (OAViewRowImpl) edVO.first();  
                        String strLatestDt = edRow.getAttribute("LatestEndDate") != null ? edRow.getAttribute("LatestEndDate").toString() : null;

                        RIMEndDtExtEOVOImpl extVO = getRIMEndDtExtEOVO1(); 
                        extVO.initExist(itemKey);

                        if(extVO != null){
                            extVO.reset();
                            while(extVO.hasNext()){
                                Row extRow = extVO.next();

                                if(extRow.getAttribute("EndDate").toString().equals(strLatestDt)){
                                    extRow.setAttribute("EndDate", strEndDate); //replace with entered date
                                    
                                    break;
                                }
                            }
                        }
                      }
                    }
              }
              else if("EXT".equals(strValidateExtension) &&
                    (workflowType.equals(RIMHelper.C_UPDATE_AC) || workflowType.equals(RIMHelper.C_CLOSE_AC))
                ){
                this.writeDiagnostics(this, "EXT" ,OAFwkConstants.STATEMENT);
                
                //create new record
                RIMEndDtExtEOVOImpl extVO = getRIMEndDtExtEOVO1(); 
                extVO.initNewRecord();
                Row eRow = extVO.getCurrentRow();
                eRow.setAttribute("EndDate", strEndDate);
                eRow.setAttribute("ItemKey", itemKey);
                eRow.setAttribute("TransactionNo", transactionNo);
                
                this.writeDiagnostics(this, "Appended new record:" + strEndDate ,OAFwkConstants.STATEMENT);     
                
                //append old record
                this.writeDiagnostics(this, "Appending old records" ,OAFwkConstants.STATEMENT);
                RIMOldEndDtExtEOVOImpl oldExtVO = getRIMOldEndDtExtEOVO1(); 
                oldExtVO.initExist("RIM-" + transactionNo);
                if(oldExtVO.getRowCount() >= 1){
                    oldExtVO.reset();
                    while(oldExtVO.hasNext()){
                        extVO.initNewRecord();
                        eRow = extVO.getCurrentRow();
                        Row oRow = oldExtVO.next();
                        String prevEndDate = oRow.getAttribute("EndDate").toString();
                        this.writeDiagnostics(this, "prevEndDate: " + prevEndDate ,OAFwkConstants.STATEMENT);
                        eRow.setAttribute("EndDate", prevEndDate);
                        eRow.setAttribute("ItemKey", itemKey);
                        eRow.setAttribute("TransactionNo", transactionNo);  
                       
                    }  
                } 
              } else if ("NEW".equals(strValidateExtension))
              {
                this.writeDiagnostics(this, "new extension" ,OAFwkConstants.STATEMENT);
                RIMEndDtExtEOVOImpl extVO = getRIMEndDtExtEOVO1(); 
                extVO.initNewRecord();

                Row eRow = extVO.getCurrentRow();
                eRow.setAttribute("EndDate", strEndDate);
                eRow.setAttribute("ItemKey", itemKey);
                eRow.setAttribute("TransactionNo", transactionNo);
              } 
              else if ("OLD".equals(strValidateExtension) && 
                        (workflowType.equals(RIMHelper.C_UPDATE_AC) || workflowType.equals(RIMHelper.C_CLOSE_AC))
                       )
               {
                this.writeDiagnostics(this, "Appending old records" ,OAFwkConstants.STATEMENT);
                RIMEndDtExtEOVOImpl extVO = getRIMEndDtExtEOVO1();
                RIMOldEndDtExtEOVOImpl oldExtVO = getRIMOldEndDtExtEOVO1(); 
                oldExtVO.initExist("RIM-" + transactionNo);
                if(oldExtVO.getRowCount() >= 1){
                    oldExtVO.reset();
                    while(oldExtVO.hasNext()){
                        extVO.initNewRecord();
                        Row eRow = extVO.getCurrentRow();
                        Row oRow = oldExtVO.next();
                        String prevEndDate = oRow.getAttribute("EndDate").toString();
                        this.writeDiagnostics(this, "prevEndDate: " + prevEndDate ,OAFwkConstants.STATEMENT);
                        eRow.setAttribute("EndDate", prevEndDate);
                        eRow.setAttribute("ItemKey", itemKey);
                        eRow.setAttribute("TransactionNo", transactionNo);  
                       
                    }  
                }
              }
            }

            
            
            // this.writeDiagnostics(this, headerRow.getAttribute("TransactionNo").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("AssignmentId").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("ResearchType").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("ResearchTitle").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("BriefDescription").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("ProjectImpactDesc").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("ProjectLeaderId").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("StartDate").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("ProjectStatus").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("ItemKey").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("LastUpdateDate").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("LastUpdatedBy").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("LastUpdateLogin").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("CreatedBy").toString() ,OAFwkConstants.STATEMENT);
            // this.writeDiagnostics(this, headerRow.getAttribute("CreationDate").toString() ,OAFwkConstants.STATEMENT);
            
            /*Handle Main Area Interest*/
            // if(headerRow.getAttribute("MainAreaInterest") != null){
            //     if("Others".equals(headerRow.getAttribute("MainAreaInterest").toString())){
            //         headerRow.setAttribute("MainAreaInterest", headerRow.getAttribute("MainAreaIntOthers").toString());
            //     }
            // }


            this.writeDiagnostics(this, "Start save Fiscal" ,OAFwkConstants.STATEMENT);

            //Set Fiscal
            RIMFiscalDetailsEOVOImpl fiscVO = getRIMFiscalDetailsEOVO1();
            Row fiscRow = (OAViewRowImpl) fiscVO.getCurrentRow();            
            if(fiscRow != null){
                fiscRow.setAttribute("TransactionNo", transactionNo);
                fiscRow.setAttribute("ItemKey", itemKey);    
            }
            

            //Project Impact
            this.writeDiagnostics(this, "Start save Proj Impact" ,OAFwkConstants.STATEMENT);
            lineNumber = 1;
            RIMProjImpactEOVOImpl pImpVO = getRIMProjImpactEOVO1();
            

            Row selectedRows[] = pImpVO.getFilteredRows("Selected", "Y");
            Row deselectedRows[] = pImpVO.getFilteredRows("Selected", "N");
            Row deselectedRows1[] = pImpVO.getFilteredRows("Selected", null);

            for (Row rowi: selectedRows) {
                this.writeDiagnostics(this, "projimpact:" + rowi.getAttribute("ProjectImpact").toString() ,OAFwkConstants.STATEMENT);

                rowi.setAttribute("TransactionNo", transactionNo);
                rowi.setAttribute("LineNo", lineNumber);
                rowi.setAttribute("ItemKey", itemKey);

                lineNumber += 1;
            }



           for (Row rowi: deselectedRows) {                
                rowi.remove();
           }

           for (Row rowi: deselectedRows1) {
                rowi.remove();
           }

           selectedRows = null;
           deselectedRows = null;
           deselectedRows1 = null;

            this.writeDiagnostics(this, "Done save Proj Impact" ,OAFwkConstants.STATEMENT);

            

           /*Members*/
           this.writeDiagnostics(this, "Start Save Members" ,OAFwkConstants.STATEMENT);
           lineNumber = 1;
            RIMTeamMembersEOVOImpl ppmVO = 
                getRIMTeamMembersEOVO1();
           ppmVO.reset();


            for (Row rowi: ppmVO.getAllRowsInRange()) {
                String member = "";
                if (rowi.getAttribute("FullName") != null) {
                    member = rowi.getAttribute("FullName").toString();
                }


                if (member != "") {
                    rowi.setAttribute("TransactionNo", transactionNo);
                    rowi.setAttribute("LineNo", lineNumber);
                    rowi.setAttribute("ItemKey", itemKey);


                    lineNumber += 1;
                } else if (member == "") {
                    rowi.remove();
                }
            }

            this.writeDiagnostics(this, "Done Save Members" ,OAFwkConstants.STATEMENT);


            this.writeDiagnostics(this, "Start Save Other Members" ,OAFwkConstants.STATEMENT);
            /*Append non-up members*/
            RIMOtherTeamMembersEOVOImpl otherMembersVO = 
                getRIMOtherTeamMembersEOVO1();


            for (Row rowi: otherMembersVO.getAllRowsInRange()) {
                String member = "";
                if (rowi.getAttribute("FullName") != null) {
                    member = rowi.getAttribute("FullName").toString();
                }


                if (member != "") {
                    rowi.setAttribute("TransactionNo", transactionNo);
                    rowi.setAttribute("LineNo", lineNumber);
                    rowi.setAttribute("ItemKey", itemKey);
                    rowi.setAttribute("Attribute1", "Non-UP");


                    lineNumber += 1;
                } else if (member == "") {
                    rowi.remove();
                }
            }

            this.writeDiagnostics(this, "Done Save Other Members" ,OAFwkConstants.STATEMENT);

            // RIMOtherTeamMembersVOImpl otherMembersVO = 
            //     getRIMOtherTeamMembersVO1();

            // for (Row rowi: otherMembersVO.getAllRowsInRange()) {
            //     String member = "";
            //     String position = "";
            //     String endDate = "";
            //     String organization = "";
            //     String projectRole = "";


            //     if (rowi.getAttribute("FullName") != null) {

            //         Row memberRow = ppmVO.createRow();
            //         member = rowi.getAttribute("FullName").toString();

            //         if (rowi.getAttribute("Position") != null)
            //             position = rowi.getAttribute("Position").toString();

            //         if (rowi.getAttribute("EndDate") != null)
            //             endDate = rowi.getAttribute("EndDate").toString();


            //         if (rowi.getAttribute("Organization") != null)
            //             organization = 
            //                     rowi.getAttribute("Organization").toString();

            //         if (rowi.getAttribute("ProjectRole") != null)
            //             projectRole = 
            //                     rowi.getAttribute("ProjectRole").toString();


            //         memberRow.setAttribute("FullName", member);
            //         memberRow.setAttribute("Position", position);
            //         memberRow.setAttribute("EndDate", endDate);
            //         memberRow.setAttribute("Organization", organization);
            //         memberRow.setAttribute("ProjectRole", projectRole);
            //         memberRow.setAttribute("Attribute1", "Non-UP");


            //         memberRow.setAttribute("TransactionNo", transactionNo);
            //         memberRow.setAttribute("LineNo", lineNumber);
            //         memberRow.setAttribute("ItemKey", itemKey);
            //         ppmVO.insertRow(memberRow);

            //         lineNumber += 1;

            //     } else if (member == "") {
            //         rowi.remove();
            //     }

            // }

            

            

            /*Funding*/
            this.writeDiagnostics(this, "Start Save Funding" ,OAFwkConstants.STATEMENT);
            
            
            lineNumber = 1;
           RIMFundingEOVOImpl fundVO = getRIMFundingEOVO1();
           fundVO.reset(); 

           for (Row rowi = fundVO.first(); rowi != null;
                    rowi = fundVO.next()) {
               // pageContext.writeDiagnostics(this, "transactionNo: " + transactionNo, 1);
               // pageContext.writeDiagnostics(this, "itemKey: " + itemKey, 1);
                String fundDesc = "";
               if (rowi.getAttribute("Description") != null && rowi.getAttribute("Amount") != null) {
                   fundDesc = 
                           rowi.getAttribute("Description").toString();
               }


               if (fundDesc != "") {
                   rowi.setAttribute("TransactionNo", transactionNo);
                   rowi.setAttribute("LineNo", lineNumber);
                   rowi.setAttribute("ItemKey", itemKey);


                   lineNumber += 1;
               } else if (fundDesc == "") {
                   rowi.remove();
               }


           }

           this.writeDiagnostics(this, "Done Save Funding" ,OAFwkConstants.STATEMENT);


           /*Milestone*/
           this.writeDiagnostics(this, "Start Save Milestone" ,OAFwkConstants.STATEMENT);
           lineNumber = 1;
           RIMMilestonesEOVOImpl mileVO = getRIMMilestonesEOVO1();
           mileVO.reset(); 

           for (Row rowi = mileVO.first(); rowi != null;
                    rowi = mileVO.next()) {
               String milestone = "";
               if (rowi.getAttribute("Milestone") != null) {
                   milestone = 
                           rowi.getAttribute("Milestone").toString();
               }


               if (milestone != "") {
                   rowi.setAttribute("TransactionNo", transactionNo);
                   rowi.setAttribute("LineNo", lineNumber);
                   rowi.setAttribute("ItemKey", itemKey);


                   lineNumber += 1;
               } else if (milestone == "") {
                   rowi.remove();
               }


           }

           this.writeDiagnostics(this, "Done Save Milestone" ,OAFwkConstants.STATEMENT);


           //Main Area Interest
            lineNumber = 1;
            this.writeDiagnostics(this, "Start save Main Area Interest" ,OAFwkConstants.STATEMENT);
            RIMMainAreaIntEOVOImpl intVO = getRIMMainAreaIntEOVO1();
            // intVO.reset();

            selectedRows = intVO.getFilteredRows("Selected", "Y");
            deselectedRows = intVO.getFilteredRows("Selected", "N");
            deselectedRows1 = intVO.getFilteredRows("Selected", null);

            for (Row rowi: selectedRows) {

                if("Others".equals(rowi.getAttribute("MainAreaInterest").toString())){
                  rowi.remove();
                }else {
                  rowi.setAttribute("TransactionNo", transactionNo);
                  rowi.setAttribute("LineNo", lineNumber);
                  rowi.setAttribute("ItemKey", itemKey);

                  lineNumber += 1;
                }
            }

            

            //Append Others Value
            if (headerRow.getAttribute("MainAreaIntOthers") != null) {
                String strMainAreaInterest = 
                    headerRow.getAttribute("MainAreaIntOthers").toString();

                if(!"".equals(strMainAreaInterest)){ //dont create record if empty
                    lineNumber += 1;
                    Row othersRow = intVO.createRow();
                    
                    othersRow.setAttribute("Selected", "Y");
                    othersRow.setAttribute("MainAreaInterest", "Others");
                    othersRow.setAttribute("Attribute1", strMainAreaInterest);
                    othersRow.setAttribute("LineNo", lineNumber);
                    othersRow.setAttribute("TransactionNo", transactionNo);
                    othersRow.setAttribute("ItemKey", itemKey);

                    intVO.insertRow(othersRow);
                }
            }




           for (Row rowi: deselectedRows) {                
                rowi.remove();
           }

           for (Row rowi: deselectedRows1) {
                rowi.remove();
           }

            selectedRows = null;
            deselectedRows = null;
            deselectedRows1 = null;

            this.writeDiagnostics(this, "Done save Main Area Int" ,OAFwkConstants.STATEMENT);


            //Development Goal
            this.writeDiagnostics(this, "Start save Development Goal" ,OAFwkConstants.STATEMENT);
            lineNumber = 1;
            RIMDevGoalEOVOImpl goalVO = getRIMDevGoalEOVO1();
            // goalVO.reset();


            selectedRows = goalVO.getFilteredRows("Selected", "Y");
            deselectedRows = goalVO.getFilteredRows("Selected", "N");
            deselectedRows1 = goalVO.getFilteredRows("Selected", null);

            for (Row rowi: selectedRows) {
                // this.writeDiagnostics(this, rowi.getAttribute("DevelopmentGoal").toString() ,OAFwkConstants.STATEMENT);
                // this.writeDiagnostics(this, itemKey ,OAFwkConstants.STATEMENT);

                rowi.setAttribute("TransactionNo", transactionNo);
                rowi.setAttribute("LineNo", lineNumber);
                rowi.setAttribute("ItemKey", itemKey);

                lineNumber += 1;
            }



           for (Row rowi: deselectedRows) {                
                rowi.remove();
           }

           for (Row rowi: deselectedRows1) {
                rowi.remove();
           }

           // selectedRows = null;
           // deselectedRows = null;
           // deselectedRows1 = null;

            this.writeDiagnostics(this, "Done save Development Goal" ,OAFwkConstants.STATEMENT);



            
        }
    }


    public void commitTransaction() {
        getTransaction().commit();

    }

    public void rollbackTran() {
        Transaction txn = getTransaction();
        if (txn.isDirty()) {
            txn.rollback();
        }
    }




    public void LoadNewProjectImpactInTable(){
        RIMProjImpactEOVOImpl projVO = getRIMProjImpactEOVO1();

        projVO.setMaxFetchSize(0);
        
        if (projVO.getRowCount() < 1) {
            RIMProjectImpactVOImpl lovVO = 
                getRIMProjectImpactVO1();

            lovVO.executeQuery();
            Integer line = lovVO.getRowCount();
            Row newRow = null;
            Row row = null;

            for (row = (OAViewRowImpl)lovVO.first(); row != null; 
                 row = (OAViewRowImpl)lovVO.next()) {
                newRow = projVO.createRow();
                
                // pageContext.writeDiagnostics(this, row.getAttribute("SubjectAreaInterestDisplay"), 1);
                newRow.setAttribute("ProjectImpact", 
                                              row.getAttribute("ProjectImpact"));
                projVO.insertRow(newRow);
                //line = line - 1;
            }
        }

        // projVO.setOrderByClause("PROJECT_IMPACT");
        // projVO.executeQuery();


    }

    public void LoadNewMainAreaIntInTable(){
        RIMMainAreaIntEOVOImpl intVO = getRIMMainAreaIntEOVO1();

        intVO.setMaxFetchSize(0);
        
        if (intVO.getRowCount() < 1) {
            RIMMainAreaIntVOImpl lovVO = 
                getRIMMainAreaIntVO1();

            lovVO.executeQuery();
            Integer line = lovVO.getRowCount();
            Row newRow = null;
            Row row = null;

            for (row = (OAViewRowImpl)lovVO.first(); row != null; 
                 row = (OAViewRowImpl)lovVO.next()) {
                newRow = intVO.createRow();
                
                
                newRow.setAttribute("MainAreaInterest", 
                                              row.getAttribute("MainAreaInterest"));
                intVO.insertRow(newRow);
                //line = line - 1;
            }
        }

    }

    public void LoadNewDevGoalInTable(){
        RIMDevGoalEOVOImpl goalVO = getRIMDevGoalEOVO1();

        goalVO.setMaxFetchSize(0);
        
        if (goalVO.getRowCount() < 1) {
            RIMDevGoalVOImpl lovVO = 
                getRIMDevGoalVO1();

            lovVO.executeQuery();
            Integer line = lovVO.getRowCount();
            Row newRow = null;
            Row row = null;

            for (row = (OAViewRowImpl)lovVO.first(); row != null; 
                 row = (OAViewRowImpl)lovVO.next()) {
                newRow = goalVO.createRow();
                
                
                newRow.setAttribute("DevelopmentGoal", 
                                              row.getAttribute("DevGoal"));
                goalVO.insertRow(newRow);
                
            }
        }

        // projVO.setOrderByClause("PROJECT_IMPACT");
        // projVO.executeQuery();


    }


    // public void LoadExistProjImpactInTable(RIMProjImpactEOVOImpl pTrVO) {
    public void LoadExistProjImpactInTable() {  
        String strAttributeTarget = "ProjectImpact";
        RIMProjImpactEOVOImpl pImpVO = getRIMProjImpactEOVO1();
//        benefTypeVO.initTranPS(paramItemKey);


        RIMProjectImpactVOImpl sourceVO = getRIMProjectImpactVO1();
        sourceVO.executeQuery();

        Integer line = sourceVO.getRowCount();
        Row rowTarget = null;
        Row rowSource = null;


        RowSetIterator rs = pImpVO.createRowSetIterator(null);
        String[] arrExistLov = new String[rs.getRowCount()];
        rs.reset();


        int ctr = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            arrExistLov[ctr] = 
                    r.getAttribute(strAttributeTarget).toString();
            ctr++;
        }


        rs.closeRowSetIterator();
        pImpVO.last();


        for (rowSource = (OAViewRowImpl)sourceVO.first(); rowSource != null; 
             rowSource = (OAViewRowImpl)sourceVO.next()) {



            String strAttributeVal = 
                rowSource.getAttribute(strAttributeTarget).toString();

            

            if (!Arrays.asList(arrExistLov).contains(strAttributeVal)) {
                pImpVO.next();
                rowTarget = pImpVO.createRow();
                rowTarget.setAttribute(strAttributeTarget, 
                                          rowSource.getAttribute(strAttributeTarget));
                pImpVO.insertRow(rowTarget);


                
            }
            //line = line - 1;
        }
        pImpVO.first();
        // pImpVO.executeQuery();

    }

    // public void LoadExistProjImpactInTable() {
    //     String strAttributeTarget = "ProjectImpact";

    //     RIMProjectImpactVOImpl sourceVO = getRIMProjectImpactVO1();
    //     sourceVO.executeQuery();

    //     RIMProjImpactEOVOImpl targetVO = getRIMProjImpactEOVO1();
        
    //     RowSetIterator rs = targetVO.createRowSetIterator(null); //Collect selected
    //     String[] arrExistLov = new String[rs.getRowCount()];
    //     rs.reset();

    //     int ctr = 0;
    //     while (rs.hasNext()) {
    //         Row r = rs.next();
    //         arrExistLov[ctr] = 
    //                 r.getAttribute(strAttributeTarget).toString();
    //         ctr++;
    //     }
    //     rs.closeRowSetIterator(); 
    //     // pTrVO.executeEmptyRowSet(); //Delete
    //     // targetVO.first();
    //     // pTrVO.first();

    //     for(Row row = targetVO.first(); row != null; row = targetVO.next()){
    //       // this.writeDiagnostics(this, "removed" + row.getAttribute(strAttributeTarget) ,OAFwkConstants.STATEMENT);
    //       row.remove();
    //     }
        

    //     for(Row row = sourceVO.first(); row != null; row = sourceVO.next()){
    //        String strAttributeVal = row.getAttribute(strAttributeTarget).toString();

    //       Row tRow = targetVO.createRow();
    //       tRow.setAttribute(strAttributeTarget, strAttributeVal);
    //       if (Arrays.asList(arrExistLov).contains(strAttributeVal)) {
            
    //         tRow.setAttribute("Selected", "Y");
    //       }

    //       targetVO.insertRow(tRow);
    //     }

    //     // 

    //     targetVO.first(); //Bring to first
    // }


    // public void LoadExistMainAreaIntInTable(RIMMainAreaIntEOVOImpl pTrVO) {
    public void LoadExistMainAreaIntInTable() {
        String strAttributeTarget = "MainAreaInterest";
        RIMMainAreaIntEOVOImpl pIntVO = getRIMMainAreaIntEOVO1();
//        benefTypeVO.initTranPS(paramItemKey);


        RIMMainAreaIntVOImpl sourceVO = getRIMMainAreaIntVO1();
        sourceVO.executeQuery();

        Integer line = sourceVO.getRowCount();
        Row rowTarget = null;
        Row rowSource = null;


        RowSetIterator rs = pIntVO.createRowSetIterator(null);
        String[] arrExistLov = new String[rs.getRowCount()];
        rs.reset();


        int ctr = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            arrExistLov[ctr] = 
                    r.getAttribute(strAttributeTarget).toString();
            ctr++;
        }


        rs.closeRowSetIterator();

        pIntVO.last();

        for (rowSource = (OAViewRowImpl)sourceVO.first(); rowSource != null; 
             rowSource = (OAViewRowImpl)sourceVO.next()) {
          
              String strAttributeVal = 
                rowSource.getAttribute(strAttributeTarget).toString();

            if (!Arrays.asList(arrExistLov).contains(strAttributeVal)) {
                pIntVO.next();
                rowTarget = pIntVO.createRow();
                rowTarget.setAttribute(strAttributeTarget, 
                                          rowSource.getAttribute(strAttributeTarget));
                pIntVO.insertRow(rowTarget);

                
            }
            //line = line - 1;
        }

        pIntVO.first();

    }
    // public void LoadExistMainAreaIntInTable(RIMMainAreaIntEOVOImpl pTrVO) {
    //     String strAttributeTarget = "MainAreaInterest";

    //     RIMMainAreaIntVOImpl sourceVO = getRIMMainAreaIntVO1();
    //     sourceVO.executeQuery();

    //     RIMMainAreaIntEOVOImpl targetVO = pTrVO;
        
    //     RowSetIterator rs = targetVO.createRowSetIterator(null); //Collect selected
    //     String[] arrExistLov = new String[rs.getRowCount()];
    //     rs.reset();

    //     int ctr = 0;
    //     while (rs.hasNext()) {
    //         Row r = rs.next();
    //         arrExistLov[ctr] = 
    //                 r.getAttribute(strAttributeTarget).toString();
    //         ctr++;
    //     }
    //     rs.closeRowSetIterator(); 
    //     for(Row row = pTrVO.first(); row != null; row = pTrVO.next()){
    //       row.remove();
    //     }

    //     for(Row row = sourceVO.first(); row != null; row = sourceVO.next()){
    //        String strAttributeVal = row.getAttribute(strAttributeTarget).toString();

    //       Row tRow = targetVO.createRow();
    //       tRow.setAttribute(strAttributeTarget, strAttributeVal);
    //       if (Arrays.asList(arrExistLov).contains(strAttributeVal)) {
    //         tRow.setAttribute("Selected", "Y");
    //       }

    //       pTrVO.insertRow(tRow);
    //     }

    //     pTrVO.first(); //Bring to first
    // }

    // public void LoadExistDevGoalInTable(RIMDevGoalEOVOImpl pTrVO) {
    public void LoadExistDevGoalInTable() {
        String strAttributeTarget = "DevelopmentGoal";
        RIMDevGoalEOVOImpl pGoalVO = getRIMDevGoalEOVO1();
//        benefTypeVO.initTranPS(paramItemKey);


        RIMDevGoalVOImpl sourceVO = getRIMDevGoalVO1();
        sourceVO.executeQuery();

        Integer line = sourceVO.getRowCount();
        Row rowTarget = null;
        Row rowSource = null;


        RowSetIterator rs = pGoalVO.createRowSetIterator(null);
        String[] arrExistLov = new String[rs.getRowCount()];
        rs.reset();


        int ctr = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            arrExistLov[ctr] = 
                    r.getAttribute(strAttributeTarget).toString();
            ctr++;
        }


        rs.closeRowSetIterator();
        pGoalVO.last();

        for (rowSource = (OAViewRowImpl)sourceVO.first(); rowSource != null; 
             rowSource = (OAViewRowImpl)sourceVO.next()) {



            String strAttributeVal = 
                rowSource.getAttribute("DevGoal").toString();

            

            if (!Arrays.asList(arrExistLov).contains(strAttributeVal)) {
                pGoalVO.next();
                rowTarget = pGoalVO.createRow();
                rowTarget.setAttribute(strAttributeTarget, 
                                          rowSource.getAttribute("DevGoal"));
                pGoalVO.insertRow(rowTarget);

                
            }
            //line = line - 1;
        }

        pGoalVO.first();

    }

    // public void LoadExistDevGoalInTable(RIMDevGoalEOVOImpl pTrVO) {
    //     String strAttributeTarget = "DevelopmentGoal";

    //     RIMDevGoalVOImpl sourceVO = getRIMDevGoalVO1();
    //     sourceVO.executeQuery();

    //     RIMDevGoalEOVOImpl targetVO = pTrVO;
        
    //     RowSetIterator rs = targetVO.createRowSetIterator(null); //Collect selected
    //     String[] arrExistLov = new String[rs.getRowCount()];
    //     rs.reset();

    //     int ctr = 0;
    //     while (rs.hasNext()) {
    //         Row r = rs.next();
    //         arrExistLov[ctr] = 
    //                 r.getAttribute(strAttributeTarget).toString();
    //         ctr++;
    //     }
    //     rs.closeRowSetIterator(); 
    //     // pTrVO.executeEmptyRowSet(); //Delete
    //     for(Row row = pTrVO.first(); row != null; row = pTrVO.next()){
    //       row.remove();
    //     }

    //     for(Row row = sourceVO.first(); row != null; row = sourceVO.next()){
    //        String strAttributeVal = row.getAttribute("DevGoal").toString();

    //       Row tRow = targetVO.createRow();
    //       tRow.setAttribute(strAttributeTarget, strAttributeVal);
    //       if (Arrays.asList(arrExistLov).contains(strAttributeVal)) {
    //         tRow.setAttribute("Selected", "Y");
    //       }

    //       pTrVO.insertRow(tRow);
    //     }

    //     pTrVO.first(); //Bring to first
    // }

    public String initApprovers(String assignmentId, String constituentUnit, String transactionNo, String action) {
        try{
            String strItemKey = "";
            
            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = conn.prepareCall("{call xxup_rim_wf_pkg.init_approvers(?,?,?,?,?)}");

            
            stmt.setString(1, assignmentId);
            stmt.setString(2, constituentUnit);
            stmt.setString(3, transactionNo);
            stmt.setString(4, action);
            stmt.registerOutParameter(5, Types.VARCHAR);
            stmt.execute();

            strItemKey = stmt.getString(5);
            stmt.close();


            return strItemKey;
            
        }catch(Exception ex){
            throw new OAException("Error occured initializing approvers table " + ex);
        }
    }

    public void storeAcctgInfo(String pItemKey, String spCodeDisp, String fundControllerDisp) {

        try{
            
            
            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = conn.prepareCall("{call xxup_rim_wf_pkg.store_acctg_info(?,?,?)}");

            
            stmt.setString(1, pItemKey);
            stmt.setString(2, spCodeDisp);
            stmt.setString(3, fundControllerDisp);
            stmt.execute();

            stmt.close();


        }catch(Exception ex){
            throw new OAException("Error occured storing acctg info " + ex);
        }
    }

    public void storeFundAcctgInfo(String pItemKey, String pFundRow) {
        CallableStatement storeStmt = null;
        
        try{
            
            
            Connection conn = getOADBTransaction().getJdbcConnection();
            storeStmt = conn.prepareCall("{call xxup_rim_wf_pkg.store_fund_acctg_info(?,?)}");

            storeStmt.setString(1, pItemKey);
            storeStmt.setString(2, pFundRow);
            storeStmt.execute();
            storeStmt.close();
            

        } catch(Exception ex){
            throw new OAException("Error occured storing fund acctg info " + ex);
        } 
    }


    public void resetFundAcctgInfo(String pItemKey) {
        CallableStatement resetStmt = null;
        
        
        try{
            
            
            Connection conn = getOADBTransaction().getJdbcConnection();
            resetStmt = conn.prepareCall("{call xxup_rim_wf_pkg.reset_fund_acctg_info(?)}");

            
            resetStmt.setString(1, pItemKey);
            resetStmt.execute();
            resetStmt.close();

        } catch(Exception ex){
            throw new OAException("Error occured reset fund acctg info " + ex);
        } 
    }


    public String initWF(String transactionNo, String itemKey, String wfProcess) {
        try{
            
            
            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = conn.prepareCall("{call xxup_rim_wf_pkg.init_wf(?,?,?)}");
            
            
            stmt.setString(1, transactionNo);
            stmt.setString(2, itemKey);
            stmt.setString(3, wfProcess);
            stmt.execute();
            stmt.close();

            return "Y";
            
        }catch(Exception ex){
            throw new OAException("Error occured calling workflow " + ex);
        }
    }

    public void showSummaryVO(String accessLevel) {
       // XxupPerPSInstitutionalEOVOImpl vo = getXxupPerPSInstitutionalEOVO1();
        RIMHeaderSummVOImpl summVo = getRIMHeaderSummVO1();
        
        if (summVo != null) {
            summVo.showSummaryVO(accessLevel);
        }

    }


    public void initTranRec(String pItemKey) {

        /* (Exist) VO2-> (Tran) VO1
        *   s-source
        *   t-target
    */


        /*Start copy*/  
        this.writeDiagnostics(this, "Copy Header info start" ,OAFwkConstants.STATEMENT);

        RIMHeaderEOVOImpl sMainVO = getRIMHeaderEOVO2();
        this.writeDiagnostics(this, "Init source vo" ,OAFwkConstants.STATEMENT);
        this.writeDiagnostics(this, "Item Key: " + pItemKey ,OAFwkConstants.STATEMENT);
        

        //MAIN
        try{
           sMainVO.reset();

           Row mRow = null;
           if(sMainVO != null){

               // this.writeDiagnostics(this, "sMainVO != null" ,OAFwkConstants.STATEMENT);
               sMainVO.initExist(pItemKey);
               
               while(sMainVO.hasNext()){
                   // this.writeDiagnostics(this, "sMainVO.hasNext()" ,OAFwkConstants.STATEMENT);

                   OAViewRowImpl currRow = (OAViewRowImpl) sMainVO.next();
                    String strTransactionNo = currRow.getAttribute("TransactionNo") != null ? currRow.getAttribute("TransactionNo").toString() : null;
                    String strAssignmentId = currRow.getAttribute("AssignmentId") != null ? currRow.getAttribute("AssignmentId").toString() : null;
                    String strResearchType = currRow.getAttribute("ResearchType") != null ? currRow.getAttribute("ResearchType").toString() : null;
                    String strResearchTypeSpec = currRow.getAttribute("ResearchTypeSpec") != null ? currRow.getAttribute("ResearchTypeSpec").toString() : null;
                    String strResearchTitle = currRow.getAttribute("ResearchTitle") != null ? currRow.getAttribute("ResearchTitle").toString() : null;
                    String strResearchTitle2 = currRow.getAttribute("ResearchTitle2") != null ? currRow.getAttribute("ResearchTitle2").toString() : null;
                    String strResearchTitle3 = currRow.getAttribute("ResearchTitle3") != null ? currRow.getAttribute("ResearchTitle3").toString() : null;
                    String strBriefDescription = currRow.getAttribute("BriefDescription") != null ? currRow.getAttribute("BriefDescription").toString() : null;
                    String strProjectLeaderId = currRow.getAttribute("ProjectLeaderId") != null ? currRow.getAttribute("ProjectLeaderId").toString() : null;
                    String strStartDate = currRow.getAttribute("StartDate") != null ? currRow.getAttribute("StartDate").toString() : null;

                    RIMLatestExtVOImpl edVO = getRIMLatestExtVO1();
                    edVO.initExist(pItemKey);
                    Row edRow = (OAViewRowImpl) edVO.next();
                    String strEndDate = edRow.getAttribute("LatestEndDate") != null ? edRow.getAttribute("LatestEndDate").toString() : null;
                    // String strEndDate = currRow.getAttribute("EndDate") != null ? currRow.getAttribute("EndDate").toString() : null;
                    String strActualEndDate = currRow.getAttribute("ActualEndDate") != null ? currRow.getAttribute("ActualEndDate").toString() : null;
                    String strProjectStatus = currRow.getAttribute("ProjectStatus") != null ? currRow.getAttribute("ProjectStatus").toString() : null;
                    String strProjectRemarks = currRow.getAttribute("ProjectRemarks") != null ? currRow.getAttribute("ProjectRemarks").toString() : null;
                    String strAttribute1 = currRow.getAttribute("Attribute1") != null ? currRow.getAttribute("Attribute1").toString() : null;
                    String strAttribute2 = currRow.getAttribute("Attribute2") != null ? currRow.getAttribute("Attribute2").toString() : null;
                    String strAttribute3 = currRow.getAttribute("Attribute3") != null ? currRow.getAttribute("Attribute3").toString() : null;
                    String strAttribute4 = currRow.getAttribute("Attribute4") != null ? currRow.getAttribute("Attribute4").toString() : null;
                    String strAttribute5 = currRow.getAttribute("Attribute5") != null ? currRow.getAttribute("Attribute5").toString() : null;
                    String strProjectImpactDesc = currRow.getAttribute("ProjectImpactDesc") != null ? currRow.getAttribute("ProjectImpactDesc").toString() : null;
                    String strProjectLeaderDisp = currRow.getAttribute("ProjectLeaderDisp") != null ? currRow.getAttribute("ProjectLeaderDisp").toString() : null;
                    String strTransactionNoDisp = currRow.getAttribute("TransactionNoDisp") != null ? currRow.getAttribute("TransactionNoDisp").toString() : null;
                    String strPositionName = currRow.getAttribute("PositionName") != null ? currRow.getAttribute("PositionName").toString() : null;
                    String strLastUpdatedByDisp = currRow.getAttribute("LastUpdatedByDisp") != null ? currRow.getAttribute("LastUpdatedByDisp").toString() : null;
                    String strStudBsNo = currRow.getAttribute("StudBsNo") != null ? currRow.getAttribute("StudBsNo").toString() : null;
                    String strStudMsNo = currRow.getAttribute("StudMsNo") != null ? currRow.getAttribute("StudMsNo").toString() : null;
                    String strStudPhdNo = currRow.getAttribute("StudPhdNo") != null ? currRow.getAttribute("StudPhdNo").toString() : null;
                    
                    

                    this.writeDiagnostics(this, "got Attributes" ,OAFwkConstants.STATEMENT);

                    RIMHeaderEOVOImpl tMainVO = getRIMHeaderEOVO1();
                    tMainVO.initNewRecord();
                    Row tRow = tMainVO.getCurrentRow();


                    this.writeDiagnostics(this, "init Target" ,OAFwkConstants.STATEMENT);

                    tRow.setAttribute("TransactionNo", strTransactionNo);
                    tRow.setAttribute("AssignmentId", strAssignmentId);
                    tRow.setAttribute("ResearchType", strResearchType);
                    tRow.setAttribute("ResearchTypeSpec", strResearchTypeSpec);
                    tRow.setAttribute("ResearchTitle", strResearchTitle);
                    tRow.setAttribute("ResearchTitle2", strResearchTitle2);
                    tRow.setAttribute("ResearchTitle3", strResearchTitle3);
                    tRow.setAttribute("BriefDescription", strBriefDescription);
                    tRow.setAttribute("ProjectLeaderId", strProjectLeaderId);
                    tRow.setAttribute("StartDate", strStartDate);
                    tRow.setAttribute("EndDate", strEndDate);
                    tRow.setAttribute("ActualEndDate", strActualEndDate);
                    tRow.setAttribute("ProjectStatus", strProjectStatus);
                    tRow.setAttribute("ProjectRemarks", strProjectRemarks);
                    tRow.setAttribute("Attribute1", strAttribute1);
                    tRow.setAttribute("Attribute2", strAttribute2);
                    tRow.setAttribute("Attribute3", strAttribute3);
                    tRow.setAttribute("Attribute4", strAttribute4);
                    tRow.setAttribute("Attribute5", strAttribute5);
                    tRow.setAttribute("ProjectImpactDesc", strProjectImpactDesc);
                    tRow.setAttribute("ProjectLeaderDisp", strProjectLeaderDisp);
                    tRow.setAttribute("TransactionNoDisp", strTransactionNoDisp);
                    tRow.setAttribute("PositionName", strPositionName);
                    tRow.setAttribute("LastUpdatedByDisp", strLastUpdatedByDisp);
                    tRow.setAttribute("StudBsNo", strStudBsNo);
                    tRow.setAttribute("StudMsNo", strStudMsNo);
                    tRow.setAttribute("StudPhdNo", strStudPhdNo);

                    this.writeDiagnostics(this, "done assign target" ,OAFwkConstants.STATEMENT);

               }
           }
        }catch(Exception ex){
            throw new OAException("Error occured initializing header info " + ex);
        }


        this.writeDiagnostics(this, "Copy Header info done" ,OAFwkConstants.STATEMENT);


        //FISCAL
        RIMFiscalDetailsEOVOImpl sFiscVO = getRIMFiscalDetailsEOVO2();

        try{

           this.writeDiagnostics(this, "Copy Fiscal info start" ,OAFwkConstants.STATEMENT);
           sFiscVO.reset();

           Row mRow = null;
           if(sFiscVO != null){
               sFiscVO.initExist(pItemKey);
               
               while(sFiscVO.hasNext()){
                   OAViewRowImpl currRow = (OAViewRowImpl) sFiscVO.next();
                    String strTransactionNo = currRow.getAttribute("TransactionNo") != null ? currRow.getAttribute("TransactionNo").toString() : null;
                    String strConstituentUnit = currRow.getAttribute("ConstituentUnit") != null ? currRow.getAttribute("ConstituentUnit").toString() : null;
                    String strResponsibilityCenter = currRow.getAttribute("ResponsibilityCenter") != null ? currRow.getAttribute("ResponsibilityCenter").toString() : null;
                    String strCollaboratingAgency = currRow.getAttribute("CollaboratingAgency") != null ? currRow.getAttribute("CollaboratingAgency").toString() : null;
                    String strFundingAgency = currRow.getAttribute("FundingAgency") != null ? currRow.getAttribute("FundingAgency").toString() : null;
                    String strTotalAmount = currRow.getAttribute("TotalAmount") != null ? currRow.getAttribute("TotalAmount").toString() : null;
                    String strSpCode = currRow.getAttribute("SpCode") != null ? currRow.getAttribute("SpCode").toString() : null;
                    String strFundControllerId = currRow.getAttribute("FundControllerId") != null ? currRow.getAttribute("FundControllerId").toString() : null;
                    String strFarExcluded = currRow.getAttribute("FarExcluded") != null ? currRow.getAttribute("FarExcluded").toString() : null;
                    String strAttribute1 = currRow.getAttribute("Attribute1") != null ? currRow.getAttribute("Attribute1").toString() : null;
                    String strAttribute2 = currRow.getAttribute("Attribute2") != null ? currRow.getAttribute("Attribute2").toString() : null;
                    String strAttribute3 = currRow.getAttribute("Attribute3") != null ? currRow.getAttribute("Attribute3").toString() : null;
                    String strAttribute4 = currRow.getAttribute("Attribute4") != null ? currRow.getAttribute("Attribute4").toString() : null;
                    String strAttribute5 = currRow.getAttribute("Attribute5") != null ? currRow.getAttribute("Attribute5").toString() : null;
                    String strFundControllerDisp = currRow.getAttribute("FundControllerDisp") != null ? currRow.getAttribute("FundControllerDisp").toString() : null;
                    String strResponsibilityCenterDisp = currRow.getAttribute("ResponsibilityCenterDisp") != null ? currRow.getAttribute("ResponsibilityCenterDisp").toString() : null;
                    String strSpCodeDisp = currRow.getAttribute("SpCodeDisp") != null ? currRow.getAttribute("SpCodeDisp").toString() : null;


                    RIMFiscalDetailsEOVOImpl tFiscVO = getRIMFiscalDetailsEOVO1();
                    tFiscVO.initNewRecord();
                    Row tRow = tFiscVO.getCurrentRow();

                    //Set Fisc ID
                    OADBTransaction tr = getOADBTransaction();
                    String strRimFiscID = tr.getSequenceValue("XXUP.XXUP_RIM_FISCAL_SEQ").toString();
                    tRow.setAttribute("RimFiscId", strRimFiscID);
                    tRow.setAttribute("TransactionNo", strTransactionNo);
                    tRow.setAttribute("ConstituentUnit", strConstituentUnit);
                    tRow.setAttribute("ResponsibilityCenter", strResponsibilityCenter);
                    tRow.setAttribute("CollaboratingAgency", strCollaboratingAgency);
                    tRow.setAttribute("FundingAgency", strFundingAgency);
                    tRow.setAttribute("TotalAmount", strTotalAmount);


                    Double dblTotalAmount = strTotalAmount != null ? Double.parseDouble(strTotalAmount) : 0;
                    double amount = Double.parseDouble(String.format("%.02f", dblTotalAmount));
                    DecimalFormat formatter = new DecimalFormat("#,###.00");    
                    tRow.setAttribute("FmTotalAmount", formatter.format(amount));
                    tRow.setAttribute("SpCode", strSpCode);
                    tRow.setAttribute("FundControllerId", strFundControllerId);
                    tRow.setAttribute("FarExcluded", strFarExcluded);
                    tRow.setAttribute("Attribute1", strAttribute1);
                    tRow.setAttribute("Attribute2", strAttribute2);
                    tRow.setAttribute("Attribute3", strAttribute3);
                    tRow.setAttribute("Attribute4", strAttribute4);
                    tRow.setAttribute("Attribute5", strAttribute5);
                    tRow.setAttribute("FundControllerDisp", strFundControllerDisp);
                    tRow.setAttribute("ResponsibilityCenterDisp", strResponsibilityCenterDisp);
                    tRow.setAttribute("SpCodeDisp", strSpCodeDisp);

                    this.writeDiagnostics(this, "Copy Fiscal info done" ,OAFwkConstants.STATEMENT);

               }
           }
           else {
                RIMFiscalDetailsEOVOImpl tFiscVO = getRIMFiscalDetailsEOVO1();
                    tFiscVO.initNewRecord();
           }
           



        }catch(Exception ex){
            throw new OAException("Error occured initializing Fiscal Details info " + ex);
        }


        //Funding
        RIMFundingEOVOImpl sFundVO = getRIMFundingEOVO2();

        try{

           this.writeDiagnostics(this, "Copy Fund start" ,OAFwkConstants.STATEMENT);
           sFundVO.reset();

           Row mRow = null;
           RIMFundingEOVOImpl tFundVO = getRIMFundingEOVO1();
           tFundVO.setMaxFetchSize(0);
           tFundVO.executeQuery();
           if(sFundVO != null){
               sFundVO.initExist(pItemKey);
               
               while(sFundVO.hasNext()){
                   OAViewRowImpl currRow = (OAViewRowImpl) sFundVO.next();

                    
                    String strLineNo = currRow.getAttribute("LineNo") != null ? currRow.getAttribute("LineNo").toString() : null;
                    String strTransactionNo = currRow.getAttribute("TransactionNo") != null ? currRow.getAttribute("TransactionNo").toString() : null;
                    String strFundingSource = currRow.getAttribute("FundingSource") != null ? currRow.getAttribute("FundingSource").toString() : null;
                    String strDescription = currRow.getAttribute("Description") != null ? currRow.getAttribute("Description").toString() : null;
                    String strStartDate = currRow.getAttribute("StartDate") != null ? currRow.getAttribute("StartDate").toString() : null;
                    String strEndDate = currRow.getAttribute("EndDate") != null ? currRow.getAttribute("EndDate").toString() : null;
                    String strAmount = currRow.getAttribute("Amount") != null ? currRow.getAttribute("Amount").toString() : null;
                    String strCurrency = currRow.getAttribute("Currency") != null ? currRow.getAttribute("Currency").toString() : null;
                    String strAttribute1 = currRow.getAttribute("Attribute1") != null ? currRow.getAttribute("Attribute1").toString() : null;
                    String strAttribute2 = currRow.getAttribute("Attribute2") != null ? currRow.getAttribute("Attribute2").toString() : null;
                    String strAttribute3 = currRow.getAttribute("Attribute3") != null ? currRow.getAttribute("Attribute3").toString() : null;
                    String strAttribute4 = currRow.getAttribute("Attribute4") != null ? currRow.getAttribute("Attribute4").toString() : null;
                    String strAttribute5 = currRow.getAttribute("Attribute5") != null ? currRow.getAttribute("Attribute5").toString() : null;


          
                    tFundVO.initNewRecord();
                    Row tRow = tFundVO.getCurrentRow();

                    //Set ID
                    OADBTransaction tr = getOADBTransaction();
                    String strRimFundId = tr.getSequenceValue("XXUP.XXUP_RIM_FUNDING_SEQ").toString();
                    tRow.setAttribute("RimFundId", strRimFundId);
                    tRow.setAttribute("LineNo", strLineNo);
                    tRow.setAttribute("TransactionNo", strTransactionNo);
                    tRow.setAttribute("FundingSource", strFundingSource);
                    tRow.setAttribute("Description", strDescription);
                    tRow.setAttribute("StartDate", strStartDate);
                    tRow.setAttribute("EndDate", strEndDate);
                    tRow.setAttribute("Amount", strAmount);
                    tRow.setAttribute("Currency", strCurrency);
                    tRow.setAttribute("Attribute1", strAttribute1);
                    tRow.setAttribute("Attribute2", strAttribute2);
                    tRow.setAttribute("Attribute3", strAttribute3);
                    tRow.setAttribute("Attribute4", strAttribute4);
                    tRow.setAttribute("Attribute5", strAttribute5);


                    

                    

               }
           }
            
            if(tFundVO.getRowCount() <= 0)
              tFundVO.initNewRecord();

        }catch(Exception ex){
            throw new OAException("Error occured initializing Funding info " + ex);
        }

        this.writeDiagnostics(this, "Copy Fund info done" ,OAFwkConstants.STATEMENT);

        


        //MEMBERS
        RIMTeamMembersEOVOImpl sMembersVO = getRIMTeamMembersEOVO2();

        try{

           this.writeDiagnostics(this, "Copy Members start" ,OAFwkConstants.STATEMENT);
           

           Row mRow = null;
           RIMTeamMembersEOVOImpl tMembersVO = getRIMTeamMembersEOVO1();
           if(sMembersVO != null){
               sMembersVO.initExist(pItemKey);
               sMembersVO.reset();

               if(sMembersVO.getRowCount() < 1)
                    tMembersVO.initExist("x");

               while(sMembersVO.hasNext()){
                   OAViewRowImpl currRow = (OAViewRowImpl) sMembersVO.next();

                    
                    String strLineNo = currRow.getAttribute("LineNo") != null ? currRow.getAttribute("LineNo").toString() : null;
                    String strTransactionNo = currRow.getAttribute("TransactionNo") != null ? currRow.getAttribute("TransactionNo").toString() : null;
                    String strFullName = currRow.getAttribute("FullName") != null ? currRow.getAttribute("FullName").toString() : null;
                    String strPosition = currRow.getAttribute("Position") != null ? currRow.getAttribute("Position").toString() : null;
                    String strEndDate = currRow.getAttribute("EndDate") != null ? currRow.getAttribute("EndDate").toString() : null;
                    String strOrganization = currRow.getAttribute("Organization") != null ? currRow.getAttribute("Organization").toString() : null;
                    String strProjectRole = currRow.getAttribute("ProjectRole") != null ? currRow.getAttribute("ProjectRole").toString() : null;
                    String strAttribute1 = currRow.getAttribute("Attribute1") != null ? currRow.getAttribute("Attribute1").toString() : null;
                    String strAttribute2 = currRow.getAttribute("Attribute2") != null ? currRow.getAttribute("Attribute2").toString() : null;
                    String strAttribute3 = currRow.getAttribute("Attribute3") != null ? currRow.getAttribute("Attribute3").toString() : null;
                    String strAttribute4 = currRow.getAttribute("Attribute4") != null ? currRow.getAttribute("Attribute4").toString() : null;
                    String strAttribute5 = currRow.getAttribute("Attribute5") != null ? currRow.getAttribute("Attribute5").toString() : null;


                    
                    tMembersVO.initNewRecord();
                    Row tRow = tMembersVO.getCurrentRow();

                    //Set ID
                    OADBTransaction tr = getOADBTransaction();
                    String strRimMemberId = tr.getSequenceValue("XXUP.XXUP_RIM_MEMBERS_SEQ").toString();
                    tRow.setAttribute("RimMemberId", strRimMemberId);
                    tRow.setAttribute("LineNo", strLineNo);
                    tRow.setAttribute("TransactionNo", strTransactionNo);
                    tRow.setAttribute("FullName", strFullName);
                    tRow.setAttribute("Position", strPosition);
                    tRow.setAttribute("EndDate", strEndDate);
                    tRow.setAttribute("Organization", strOrganization);
                    tRow.setAttribute("ProjectRole", strProjectRole);
                    tRow.setAttribute("Attribute1", strAttribute1);
                    tRow.setAttribute("Attribute2", strAttribute2);
                    tRow.setAttribute("Attribute3", strAttribute3);
                    tRow.setAttribute("Attribute4", strAttribute4);
                    tRow.setAttribute("Attribute5", strAttribute5);


                    

                    this.writeDiagnostics(this, "Copy members info done" ,OAFwkConstants.STATEMENT);

               }
           }

            if(tMembersVO.getRowCount() <= 0)
               tMembersVO.initNewRecord();

        }catch(Exception ex){
            throw new OAException("Error occured initializing Members info " + ex);
        }

        


        // //NON-UP
        RIMOtherTeamMembersEOVOImpl sOthMembersVO = getRIMOtherTeamMembersEOVO2();

        try{

           this.writeDiagnostics(this, "Copy NON-UP start" ,OAFwkConstants.STATEMENT);
           

           Row mRow = null;
           RIMOtherTeamMembersEOVOImpl tOthMembersVO = getRIMOtherTeamMembersEOVO1();
           
           if(sOthMembersVO != null){
               sOthMembersVO.initExist(pItemKey);
               sOthMembersVO.reset();
               
               while(sOthMembersVO.hasNext()){
                   OAViewRowImpl currRow = (OAViewRowImpl) sOthMembersVO.next();


                    String strLineNo = currRow.getAttribute("LineNo") != null ? currRow.getAttribute("LineNo").toString() : null;
                    String strTransactionNo = currRow.getAttribute("TransactionNo") != null ? currRow.getAttribute("TransactionNo").toString() : null;
                    String strFullName = currRow.getAttribute("FullName") != null ? currRow.getAttribute("FullName").toString() : null;
                    String strPosition = currRow.getAttribute("Position") != null ? currRow.getAttribute("Position").toString() : null;
                    String strEndDate = currRow.getAttribute("EndDate") != null ? currRow.getAttribute("EndDate").toString() : null;
                    String strOrganization = currRow.getAttribute("Organization") != null ? currRow.getAttribute("Organization").toString() : null;
                    String strProjectRole = currRow.getAttribute("ProjectRole") != null ? currRow.getAttribute("ProjectRole").toString() : null;
                    String strAttribute1 = currRow.getAttribute("Attribute1") != null ? currRow.getAttribute("Attribute1").toString() : null;
                    String strAttribute2 = currRow.getAttribute("Attribute2") != null ? currRow.getAttribute("Attribute2").toString() : null;
                    String strAttribute3 = currRow.getAttribute("Attribute3") != null ? currRow.getAttribute("Attribute3").toString() : null;
                    String strAttribute4 = currRow.getAttribute("Attribute4") != null ? currRow.getAttribute("Attribute4").toString() : null;
                    String strAttribute5 = currRow.getAttribute("Attribute5") != null ? currRow.getAttribute("Attribute5").toString() : null;


                    
                    tOthMembersVO.initNewRecord();
                    Row tRow = tOthMembersVO.getCurrentRow();

                    //Set ID
                    OADBTransaction tr = getOADBTransaction();
                    String strRimMemberId = tr.getSequenceValue("XXUP.XXUP_RIM_MEMBERS_SEQ").toString();
                    tRow.setAttribute("RimMemberId", strRimMemberId);
                    tRow.setAttribute("LineNo", strLineNo);
                    tRow.setAttribute("TransactionNo", strTransactionNo);
                    tRow.setAttribute("FullName", strFullName);
                    tRow.setAttribute("Position", strPosition);
                    tRow.setAttribute("EndDate", strEndDate);
                    tRow.setAttribute("Organization", strOrganization);
                    tRow.setAttribute("ProjectRole", strProjectRole);
                    tRow.setAttribute("Attribute1", strAttribute1);
                    tRow.setAttribute("Attribute2", strAttribute2);
                    tRow.setAttribute("Attribute3", strAttribute3);
                    tRow.setAttribute("Attribute4", strAttribute4);
                    tRow.setAttribute("Attribute5", strAttribute5);

               }
           }

            if(tOthMembersVO.getRowCount() <= 0)
                tOthMembersVO.initNewRecord();

        }catch(Exception ex){
            throw new OAException("Error occured initializing Other Members info " + ex);
        }

        


        this.writeDiagnostics(this, "Done Copy NON-UP " ,OAFwkConstants.STATEMENT);


        // //Project Impact
        RIMProjImpactEOVOImpl sProjImpVO = getRIMProjImpactEOVO2();

        try{

           this.writeDiagnostics(this, "Copy Proj Impact start" ,OAFwkConstants.STATEMENT);
           sProjImpVO.reset();

           Row mRow = null;
           RIMProjImpactEOVOImpl tProjImpVO = getRIMProjImpactEOVO1();
           if(sProjImpVO != null){
               sProjImpVO.initExist(pItemKey);
               
               while(sProjImpVO.hasNext()){
                   OAViewRowImpl currRow = (OAViewRowImpl) sProjImpVO.next();

                    String strLineNo = currRow.getAttribute("LineNo") != null ? currRow.getAttribute("LineNo").toString() : "";
                    String strTransactionNo = currRow.getAttribute("TransactionNo") != null ? currRow.getAttribute("TransactionNo").toString() : "";
                    String strSelected = currRow.getAttribute("Selected") != null ? currRow.getAttribute("Selected").toString() : "";
                    String strProjectImpact = currRow.getAttribute("ProjectImpact") != null ? currRow.getAttribute("ProjectImpact").toString() : "";
                    String strAttribute1 = currRow.getAttribute("Attribute1") != null ? currRow.getAttribute("Attribute1").toString() : "";
                    String strAttribute2 = currRow.getAttribute("Attribute2") != null ? currRow.getAttribute("Attribute2").toString() : "";
                    String strAttribute3 = currRow.getAttribute("Attribute3") != null ? currRow.getAttribute("Attribute3").toString() : "";
                    String strAttribute4 = currRow.getAttribute("Attribute4") != null ? currRow.getAttribute("Attribute4").toString() : "";
                    String strAttribute5 = currRow.getAttribute("Attribute5") != null ? currRow.getAttribute("Attribute5").toString() : "";


                    
                    tProjImpVO.initNewRecord();
                    Row tRow = tProjImpVO.getCurrentRow();

                    //Set ID
                    OADBTransaction tr = getOADBTransaction();
                    String strRimProjImpactId = tr.getSequenceValue("XXUP.XXUP_RIM_PROJ_IMPACT_SEQ").toString();
                    tRow.setAttribute("RimProjImpactId", strRimProjImpactId);
                    tRow.setAttribute("LineNo", strLineNo);
                    tRow.setAttribute("TransactionNo", strTransactionNo);
                    tRow.setAttribute("Selected", strSelected);
                    tRow.setAttribute("ProjectImpact", strProjectImpact);
                    tRow.setAttribute("Attribute1", strAttribute1);
                    tRow.setAttribute("Attribute2", strAttribute2);
                    tRow.setAttribute("Attribute3", strAttribute3);
                    tRow.setAttribute("Attribute4", strAttribute4);
                    tRow.setAttribute("Attribute5", strAttribute5);

            
                    

               }
           }

           if(tProjImpVO.getRowCount() >= 1){
               // LoadExistProjImpactInTable(tProjImpVO);
                LoadExistProjImpactInTable();
            }else{
                LoadNewProjectImpactInTable();
            }

            this.writeDiagnostics(this, "Copy ProjectImpact info done" ,OAFwkConstants.STATEMENT);


        }catch(Exception ex){
            throw new OAException("Error occured initializing Project Impact info " + ex);
        }


        // //Milestone
        RIMMilestonesEOVOImpl sMileVO = getRIMMilestonesEOVO2();

        try{

           this.writeDiagnostics(this, "Copy Milestone start" ,OAFwkConstants.STATEMENT);
           sMileVO.reset();

           Row mRow = null;
           if(sMileVO != null){
               sMileVO.initExist(pItemKey);
               
               while(sMileVO.hasNext()){
                   OAViewRowImpl currRow = (OAViewRowImpl) sMileVO.next();

                    String strTransactionNo = currRow.getAttribute("TransactionNo") != null ? currRow.getAttribute("TransactionNo").toString() : "";
                    String strLineNo = currRow.getAttribute("LineNo") != null ? currRow.getAttribute("LineNo").toString() : "";
                    String strMilestone = currRow.getAttribute("Milestone") != null ? currRow.getAttribute("Milestone").toString() : "";
                    String strCompletionPercentage = currRow.getAttribute("CompletionPercentage") != null ? currRow.getAttribute("CompletionPercentage").toString() : "";
                    String strBudgetReleasedDate = currRow.getAttribute("BudgetReleasedDate") != null ? currRow.getAttribute("BudgetReleasedDate").toString() : "";
                    String strRemarks = currRow.getAttribute("Remarks") != null ? currRow.getAttribute("Remarks").toString() : "";
                    String strAttribute1 = currRow.getAttribute("Attribute1") != null ? currRow.getAttribute("Attribute1").toString() : "";
                    String strAttribute2 = currRow.getAttribute("Attribute2") != null ? currRow.getAttribute("Attribute2").toString() : "";
                    String strAttribute3 = currRow.getAttribute("Attribute3") != null ? currRow.getAttribute("Attribute3").toString() : "";
                    String strAttribute4 = currRow.getAttribute("Attribute4") != null ? currRow.getAttribute("Attribute4").toString() : "";
                    String strAttribute5 = currRow.getAttribute("Attribute5") != null ? currRow.getAttribute("Attribute5").toString() : "";


                    RIMMilestonesEOVOImpl tMileVO = getRIMMilestonesEOVO1();
                    tMileVO.initNewRecord();
                    Row tRow = tMileVO.getCurrentRow();

                    //Set ID
                    OADBTransaction tr = getOADBTransaction();
                    String strRimMilestoneId = tr.getSequenceValue("XXUP.XXUP_RIM_MILESTONE_SEQ").toString();
                    tRow.setAttribute("RimMilestoneId", strRimMilestoneId);
                    tRow.setAttribute("TransactionNo", strTransactionNo);
                    tRow.setAttribute("LineNo", strLineNo);
                    tRow.setAttribute("Milestone", strMilestone);
                    tRow.setAttribute("CompletionPercentage", strCompletionPercentage);
                    tRow.setAttribute("BudgetReleasedDate", strBudgetReleasedDate);
                    tRow.setAttribute("Remarks", strRemarks);
                    tRow.setAttribute("Attribute1", strAttribute1);
                    tRow.setAttribute("Attribute2", strAttribute2);
                    tRow.setAttribute("Attribute3", strAttribute3);
                    tRow.setAttribute("Attribute4", strAttribute4);
                    tRow.setAttribute("Attribute5", strAttribute5);

                    this.writeDiagnostics(this, "Copy Milestone info done" ,OAFwkConstants.STATEMENT);

               }
           }



        }catch(Exception ex){
            throw new OAException("Error occured initializing Milestone info " + ex);
        }

        // Main Area Interest
        RIMMainAreaIntEOVOImpl sIntVO = getRIMMainAreaIntEOVO2();

        try{

           this.writeDiagnostics(this, "Copy Main Area Interest start" ,OAFwkConstants.STATEMENT);
           sIntVO.reset();

           Row mRow = null;
           RIMMainAreaIntEOVOImpl tIntVO = getRIMMainAreaIntEOVO1();
           if(sIntVO != null){
               sIntVO.initExist(pItemKey);
               
               while(sIntVO.hasNext()){
                   OAViewRowImpl currRow = (OAViewRowImpl) sIntVO.next();

                    String strLineNo = currRow.getAttribute("LineNo") != null ? currRow.getAttribute("LineNo").toString() : "";
                    String strTransactionNo = currRow.getAttribute("TransactionNo") != null ? currRow.getAttribute("TransactionNo").toString() : "";
                    String strSelected = currRow.getAttribute("Selected") != null ? currRow.getAttribute("Selected").toString() : "";
                    String strMainAreaInterest = currRow.getAttribute("MainAreaInterest") != null ? currRow.getAttribute("MainAreaInterest").toString() : "";
                    String strAttribute1 = currRow.getAttribute("Attribute1") != null ? currRow.getAttribute("Attribute1").toString() : "";
                    String strAttribute2 = currRow.getAttribute("Attribute2") != null ? currRow.getAttribute("Attribute2").toString() : "";
                    String strAttribute3 = currRow.getAttribute("Attribute3") != null ? currRow.getAttribute("Attribute3").toString() : "";
                    String strAttribute4 = currRow.getAttribute("Attribute4") != null ? currRow.getAttribute("Attribute4").toString() : "";
                    String strAttribute5 = currRow.getAttribute("Attribute5") != null ? currRow.getAttribute("Attribute5").toString() : "";


                    
                    tIntVO.initNewRecord();
                    Row tRow = tIntVO.getCurrentRow();

                    //Set ID
                    OADBTransaction tr = getOADBTransaction();
                    String strRimMaiId = tr.getSequenceValue("XXUP.XXUP_RIM_MAIN_AREA_INT_SEQ").toString();
                    tRow.setAttribute("RimMaiId", strRimMaiId);
                    tRow.setAttribute("LineNo", strLineNo);
                    tRow.setAttribute("TransactionNo", strTransactionNo);
                    tRow.setAttribute("Selected", strSelected);
                    tRow.setAttribute("MainAreaInterest", strMainAreaInterest);
                    tRow.setAttribute("Attribute1", strAttribute1);
                    tRow.setAttribute("Attribute2", strAttribute2);
                    tRow.setAttribute("Attribute3", strAttribute3);
                    tRow.setAttribute("Attribute4", strAttribute4);
                    tRow.setAttribute("Attribute5", strAttribute5);

            
                    

               }
           }

           if(tIntVO.getRowCount() >= 1){
                // LoadExistMainAreaIntInTable(tIntVO);
                LoadExistMainAreaIntInTable();
            }else{
                LoadNewMainAreaIntInTable();
            }

            this.writeDiagnostics(this, "Copy Main Area Interest info done" ,OAFwkConstants.STATEMENT);


        }catch(Exception ex){
            throw new OAException("Error occured initializing Main Area Interest info " + ex);
        }


        // Development Goal
        RIMDevGoalEOVOImpl sGoalVO = getRIMDevGoalEOVO2();

        try{

           this.writeDiagnostics(this, "Copy Dev Goal start" ,OAFwkConstants.STATEMENT);
           sGoalVO.reset();

           Row mRow = null;
           RIMDevGoalEOVOImpl tGoalVO = getRIMDevGoalEOVO1();
           if(sGoalVO != null){
               sGoalVO.initExist(pItemKey);
               
               while(sGoalVO.hasNext()){
                   OAViewRowImpl currRow = (OAViewRowImpl) sGoalVO.next();

                    String strLineNo = currRow.getAttribute("LineNo") != null ? currRow.getAttribute("LineNo").toString() : "";
                    String strTransactionNo = currRow.getAttribute("TransactionNo") != null ? currRow.getAttribute("TransactionNo").toString() : "";
                    String strSelected = currRow.getAttribute("Selected") != null ? currRow.getAttribute("Selected").toString() : "";
                    String strDevelopmentGoal = currRow.getAttribute("DevelopmentGoal") != null ? currRow.getAttribute("DevelopmentGoal").toString() : "";
                    String strAttribute1 = currRow.getAttribute("Attribute1") != null ? currRow.getAttribute("Attribute1").toString() : "";
                    String strAttribute2 = currRow.getAttribute("Attribute2") != null ? currRow.getAttribute("Attribute2").toString() : "";
                    String strAttribute3 = currRow.getAttribute("Attribute3") != null ? currRow.getAttribute("Attribute3").toString() : "";
                    String strAttribute4 = currRow.getAttribute("Attribute4") != null ? currRow.getAttribute("Attribute4").toString() : "";
                    String strAttribute5 = currRow.getAttribute("Attribute5") != null ? currRow.getAttribute("Attribute5").toString() : "";


                    
                    tGoalVO.initNewRecord();
                    Row tRow = tGoalVO.getCurrentRow();

                    //Set ID
                    OADBTransaction tr = getOADBTransaction();
                    String strRimDevGoalId = tr.getSequenceValue("XXUP.XXUP_RIM_DEV_GOAL_SEQ").toString();
                    tRow.setAttribute("RimDevGoalId", strRimDevGoalId);
                    tRow.setAttribute("LineNo", strLineNo);
                    tRow.setAttribute("TransactionNo", strTransactionNo);
                    tRow.setAttribute("Selected", strSelected);
                    tRow.setAttribute("DevelopmentGoal", strDevelopmentGoal);
                    tRow.setAttribute("Attribute1", strAttribute1);
                    tRow.setAttribute("Attribute2", strAttribute2);
                    tRow.setAttribute("Attribute3", strAttribute3);
                    tRow.setAttribute("Attribute4", strAttribute4);
                    tRow.setAttribute("Attribute5", strAttribute5);

            
                    

               }
           }

          if(tGoalVO.getRowCount() >= 1){
               // LoadExistDevGoalInTable(tGoalVO);
              LoadExistDevGoalInTable();
           }else{
               LoadNewDevGoalInTable();
           }

           this.writeDiagnostics(this, "Copy Development Goal info done" ,OAFwkConstants.STATEMENT);


        }catch(Exception ex){
            throw new OAException("Error occured initializing Development Goal info " + ex);
        }

            
            
    }

    public void resubmitTran(String paramItemKey) {
        try {


            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = 
                conn.prepareCall("{call xxup_rim_wf_pkg.resubmit(?)}");


            stmt.setString(1, paramItemKey);
            stmt.execute();
            stmt.close();

        } catch (Exception ex) {
            throw new OAException("Error occured calling workflow " + ex);
        }
    }

    


    public void updateAcctgInfo(String paramItemKey) {
        try {


            Connection conn = getOADBTransaction().getJdbcConnection();

            // CallableStatement stmt = conn.prepareCall("{call xxup_rim_wf_pkg.commit_acctg_upd(?)}");
            // stmt.setString(1, paramItemKey);
            // stmt.execute();
            // stmt.close();  

            CallableStatement stmt = conn.prepareCall("{call xxup_rim_wf_pkg.upd_acctg_info(?)}");
            stmt.setString(1, paramItemKey);
            stmt.execute();
            stmt.close();

                      


        } catch (Exception ex) {
            throw new OAException("Error occured calling workflow " + ex);
        }
    }

    /*For CLOSE WF*/
    public void updateProjStatus(String pItemKey) {
        try {


            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = conn.prepareCall("{call xxup_rim_wf_pkg.upd_proj_stat(?)}");


            stmt.setString(1, pItemKey);
            stmt.execute();
            stmt.close();

            this.writeDiagnostics(this, "done updateProjStatus" ,OAFwkConstants.STATEMENT);

        } catch (Exception ex) {
            throw new OAException("Error occured calling workflow " + ex);
        }
    }

    public void completeProj(String pItemKey) {
        try {


            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = conn.prepareCall("{call xxup_rim_wf_pkg.complete_proj(?)}");


            stmt.setString(1, pItemKey);
            stmt.execute();
            stmt.close();

            this.writeDiagnostics(this, "done completeProj" ,OAFwkConstants.STATEMENT);

        } catch (Exception ex) {
            throw new OAException("Error occured calling workflow " + ex);
        }
    }

    public void reviewTran(String pItemKey) {
        try {
            // pItemKey = "RIM-1776";

            RIMHeaderEOVOImpl sMainVO = getRIMHeaderEOVO1();
            sMainVO.initExist(pItemKey);

            RIMFiscalDetailsEOVOImpl sFiscVO = getRIMFiscalDetailsEOVO1();
            sFiscVO.initExist(pItemKey);


            /*Others*/
            RIMFundingEOVOImpl sFundVO = getRIMFundingEOVO1();
            sFundVO.initExist(pItemKey);

            /*ACCTG*/
            RIMFundingRevVOImpl revFundVO = getRIMFundingRevVO1();
            revFundVO.setWhereClause(null);
            revFundVO.setpItemKey(pItemKey);
            revFundVO.executeQuery();


            RIMTeamMembersEOVOImpl sMembersVO = getRIMTeamMembersEOVO1();
            sMembersVO.initExist(pItemKey);


            RIMOtherTeamMembersEOVOImpl sOtherMembersVO = getRIMOtherTeamMembersEOVO1();
            sOtherMembersVO.initExist(pItemKey);


            RIMMilestonesEOVOImpl sMileVO = getRIMMilestonesEOVO1();
            sMileVO.initExist(pItemKey);


            RIMProjImpactEOVOImpl sProjImpVO = getRIMProjImpactEOVO1();
            sProjImpVO.initExist(pItemKey);

            RIMMainAreaIntEOVOImpl intVO = getRIMMainAreaIntEOVO1();
            intVO.initExist(pItemKey);

            RIMDevGoalEOVOImpl goalVO = getRIMDevGoalEOVO1();
            goalVO.initExist(pItemKey);

            String transactionNo = "";
            if(sMainVO != null){
              sMainVO.reset();
              Row row = (OAViewRowImpl) sMainVO.next();

              if(row != null){
                transactionNo = row.getAttribute("TransactionNo").toString();  
              }
              
            }


            RIMEndDtExtEOVOImpl extVO = getRIMEndDtExtEOVO1();
            extVO.initExist(pItemKey);

            setApproversTable(pItemKey);

        } catch (Exception ex) {
            throw OAException.wrapperException(ex);
        }
    }
    

    public void removeNonMemberVO(String pItemKey) {
        RIMTeamMembersEOVOImpl membersVO = 
            getRIMTeamMembersEOVO1();
        membersVO.initExist(pItemKey);


        RIMOtherTeamMembersVOImpl othersVO = 
            getRIMOtherTeamMembersVO1();
        othersVO.setMaxFetchSize(0);
        othersVO.executeQuery();


        String fullName = "";
        String isUP = "";

        /*  Loop for each record and check if the member is Non-UP
         *  if yes, remove the Non UP member from the UP group
         * */
        //        for(Row rowi : membersVO.getAllRowsInRange()){
        for (Row rowi = membersVO.first(); rowi != null; 
             rowi = membersVO.next()) {

            if (rowi.getAttribute("Attribute1") != null) {
                isUP = rowi.getAttribute("Attribute1").toString();
                //                pageContext.writeDiagnostics(this, isUP, 1);

                if ("Non-UP".equals(isUP)) {

                    Row othersRow = othersVO.createRow();

                    if (rowi.getAttribute("FullName") != null)
                        othersRow.setAttribute("FullName", 
                                               rowi.getAttribute("FullName").toString());

                    if (rowi.getAttribute("Position") != null)
                        othersRow.setAttribute("Position", 
                                               rowi.getAttribute("Position").toString());

                    if (rowi.getAttribute("Organization") != null)
                        othersRow.setAttribute("Organization", 
                                               rowi.getAttribute("Organization").toString());

                    if (rowi.getAttribute("ProjectRole") != null)
                        othersRow.setAttribute("ProjectRole", 
                                               rowi.getAttribute("ProjectRole").toString());

                    othersVO.insertRow(othersRow);

                    rowi.remove();
                }
            }

        }


    }

    public Map<String, String> totalFundAmount(){
      Map<String, String> mFund = new HashMap<String, String>();
      double total = 0;

      RIMFundingEOVOImpl fundVO = getRIMFundingEOVO1();
      RowSetIterator rsFundVO = fundVO.createRowSetIterator(null);

      rsFundVO.reset();
      while(rsFundVO.hasNext()){
        Row row = rsFundVO.next();

        if(row.getAttribute("Amount") != null){
          total += Double.valueOf(row.getAttribute("Amount").toString());
        }
      }

      double amount = Double.parseDouble(String.format("%.02f", total));
      DecimalFormat formatter = new DecimalFormat("#,###.00");
    
      mFund.put("formatted", formatter.format(amount));
      mFund.put("non-formatted", String.format("%.02f", total));

      // return String.format("%.02f", total);
      //Double.toString(total);

      return mFund;
    }

    public void returnNonMemberVO() {
        RIMTeamMembersEOVOImpl membersVO = 
            getRIMTeamMembersEOVO1();

        String fullName = "";
        String isUP = "";

        /*  Loop for each record and check if the member is Non-UP
         *  if yes, remove the Non UP member from the UP group
         * */
        //        for(Row rowi : membersVO.getAllRowsInRange()){
        for (Row rowi = membersVO.first(); rowi != null; 
             rowi = membersVO.next()) {


            if (rowi.getAttribute("Attribute1") != null) {
                isUP = rowi.getAttribute("Attribute1").toString();

                if ("Non-UP".equals(isUP)) {
                    rowi.remove();
                }
            }

        }


    }
    

    public void updateRec(String pItemKey, String pWorkflowType){
        try {
            RIMHeaderEOVOImpl sMainVO = getRIMHeaderEOVO1();
            sMainVO.initExist(pItemKey);

            RIMFiscalDetailsEOVOImpl sFiscVO = getRIMFiscalDetailsEOVO1();
            sFiscVO.initExist(pItemKey);


            RIMFundingEOVOImpl sFundVO = getRIMFundingEOVO1();
            sFundVO.initExist(pItemKey);

            if(sFundVO.getRowCount() < 1){
                sFundVO.initNewRecord();
            }

            RIMTeamMembersEOVOImpl sMembersVO = getRIMTeamMembersEOVO1();
            sMembersVO.initExist(pItemKey);

            if(sMembersVO.getRowCount() < 1) {
                sMembersVO.initNewRecord();
            }


            RIMOtherTeamMembersEOVOImpl sOtherMembersVO = getRIMOtherTeamMembersEOVO1();
            sOtherMembersVO.initExist(pItemKey);

            if(sOtherMembersVO.getRowCount() < 1) {
                sOtherMembersVO.initNewRecord();
            }


            RIMMilestonesEOVOImpl sMileVO = getRIMMilestonesEOVO1();
            sMileVO.initExist(pItemKey);

            if(sMileVO.getRowCount() < 1) {
                sMileVO.initNewRecord();
            }


            RIMProjImpactEOVOImpl sProjImpVO = getRIMProjImpactEOVO1();
            sProjImpVO.initExist(pItemKey);


            if(sProjImpVO.getRowCount() >= 1){
                // LoadExistProjImpactInTable(sProjImpVO);
               LoadExistProjImpactInTable();
            }else{
                LoadNewProjectImpactInTable();
            }


            RIMMainAreaIntEOVOImpl sIntVO = getRIMMainAreaIntEOVO1();
            sIntVO.initExist(pItemKey);


            if(sIntVO.getRowCount() >= 1){
                // LoadExistMainAreaIntInTable(tIntVO);
                LoadExistMainAreaIntInTable();
            }else{
                LoadNewMainAreaIntInTable();
            }


            RIMDevGoalEOVOImpl sGoalVO = getRIMDevGoalEOVO1();
            sGoalVO.initExist(pItemKey);
            if(sGoalVO.getRowCount() >= 1){
                // LoadExistDevGoalInTable(sGoalVO);
                LoadExistDevGoalInTable();
            }else{
                LoadNewDevGoalInTable();
            }

            String transactionNo = "";
            if(sMainVO != null){
              sMainVO.reset();
              Row row = (OAViewRowImpl) sMainVO.next();
              transactionNo = row.getAttribute("TransactionNo").toString();
            }


            RIMLatestExtVOImpl edVO = getRIMLatestExtVO1();
            this.writeDiagnostics(this, "pWorkflowType:"+pWorkflowType ,OAFwkConstants.STATEMENT);
            String itemKey = pWorkflowType.equals(RIMHelper.C_RFC_AC) ? pItemKey : "RIM-" + transactionNo;
            edVO.initExist(itemKey);
            

            if(edVO != null ) {
              if(edVO.getRowCount() >= 1 ){
                this.writeDiagnostics(this, "found latest" ,OAFwkConstants.STATEMENT);
                Row edRow = (OAViewRowImpl) edVO.first();  

                String strEndDate = edRow.getAttribute("LatestEndDate") != null ? edRow.getAttribute("LatestEndDate").toString() : null;
              
                Row mRow = sMainVO.first();
                mRow.setAttribute("EndDate", strEndDate);
                this.writeDiagnostics(this, "update end date: " + strEndDate ,OAFwkConstants.STATEMENT);  
              } else { this.writeDiagnostics(this, "latestnotfound" ,OAFwkConstants.STATEMENT); }
            }


        } catch (Exception ex) {
            // throw OAException.wrapperException(ex);
          throw new OAException("Error Loading Records: " + ex);
        }
    }


   public void setApproversTable(String paramItemKey) {
       try {

           RIMActionHistoryVOImpl ahVO = getRIMActionHistoryVO1();
           ahVO.initApprovers(paramItemKey);

       } catch (Exception ex) {
           OAException.wrapperException(ex);
       }
   }

   public void delRecords(String paramItemKey) {
        try {


            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = conn.prepareCall("{call xxup_rim_wf_pkg.del_records(?)}");


            stmt.setString(1, paramItemKey);
            stmt.execute();
            stmt.close();

        } catch (Exception ex) {
            throw new OAException("Error occured calling workflow " + ex);
        }
    }

    public void limitProjectStatus(String pUrl){
        RIMProjectStatusVOImpl psVO = getRIMProjectStatusVO1();

        psVO.limitProjectStatus(pUrl);
        this.writeDiagnostics(this, "AM" ,OAFwkConstants.STATEMENT);

        
    }

    public void delExtensions(String paramItemKey) {
        try {

            RIMEndDtExtEOVOImpl extVO = getRIMEndDtExtEOVO1();
            extVO.initExist(paramItemKey);


            while(extVO.hasNext()){
              OAViewRowImpl extRow = (OAViewRowImpl) extVO.next();
              extRow.remove();
            }

            // getTransaction().commit();

            

        } catch (Exception ex) {
            throw new OAException("Error occured deleting extensions" + ex);
        }
    }



   public void setAttachments(String transactionNo) {
       try {

          RIMAttachmentEOVOImpl attachVO = getRIMAttachmentEOVO1();
          attachVO.initAttachments(transactionNo);

       } catch (Exception ex) {
           OAException.wrapperException(ex);
       }
   }


   public String validateExtension(){
      String result = "";

      try{

        // this.writeDiagnostics(this, "validating extension" ,OAFwkConstants.STATEMENT);
        RIMHeaderEOVOImpl mainVO = getRIMHeaderEOVO1();
        Row headerRow = (OAViewRowImpl) mainVO.getCurrentRow();

        String transactionNo = headerRow.getAttribute("TransactionNo").toString();
        String strEndDate = headerRow.getAttribute("EndDate").toString();
        RIMLatestExtVOImpl edVO = getRIMLatestExtVO1();
        edVO.initExist("RIM-" + transactionNo); //retrieve original
        
        
        if( edVO != null ) {
          if( edVO.getRowCount() >= 1 ){

            //get latest end date
            Row edRow = (OAViewRowImpl) edVO.first();//edVO.getCurrentRow();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");        
            String strLatestDt = edRow.getAttribute("LatestEndDate").toString();

            try{
                //if latest end date is earlier the new end date entered, create record
                if(sdf.parse(strLatestDt).before(sdf.parse(strEndDate))){

                  //delete exist (when using backbutton)
                  // delExtensions(itemKey);
                  result = "EXT";

                  
                }else if(strLatestDt.equals(strEndDate)){
                  result = "OLD";

                } else{ //if entered is earlier than latest end date
                  result = "You have entered date earlier than last MOA End Date: " + strLatestDt;
                }


            }catch(ParseException ex){
                throw new OAException("Error parsing Dates: " + ex);
            }catch(Exception ex){
                throw new OAException("Error comparing End Dates: " + ex);
            }
            

          }else {
            return "NEW";
          }
        }

      }catch(Exception ex){
        return ex.getMessage();
        // throw new OAException("Error validating extension " + ex);
      }
      
      return result;
   }


    /**Container's getter for RIMFiscalDetailsEOVO1
     */
    public RIMFiscalDetailsEOVOImpl getRIMFiscalDetailsEOVO1() {
        return (RIMFiscalDetailsEOVOImpl)findViewObject("RIMFiscalDetailsEOVO1");
    }

    /**Container's getter for RIMTeamMembersEOVO1
     */
    public RIMTeamMembersEOVOImpl getRIMTeamMembersEOVO1() {
        return (RIMTeamMembersEOVOImpl)findViewObject("RIMTeamMembersEOVO1");
    }


    /**Container's getter for RIMProjImpactEOVO1
     */
    public RIMProjImpactEOVOImpl getRIMProjImpactEOVO1() {
        return (RIMProjImpactEOVOImpl)findViewObject("RIMProjImpactEOVO1");
    }

    /**Container's getter for RIMProjectImpactVO1
     */
    public RIMProjectImpactVOImpl getRIMProjectImpactVO1() {
        return (RIMProjectImpactVOImpl)findViewObject("RIMProjectImpactVO1");
    }


    /**Container's getter for RIMMilestonesEOVO1
     */
    public RIMMilestonesEOVOImpl getRIMMilestonesEOVO1() {
        return (RIMMilestonesEOVOImpl)findViewObject("RIMMilestonesEOVO1");
    }

    /**Container's getter for RIMOtherTeamMembersVO1
     */
    public RIMOtherTeamMembersVOImpl getRIMOtherTeamMembersVO1() {
        return (RIMOtherTeamMembersVOImpl)findViewObject("RIMOtherTeamMembersVO1");
    }

    /**Container's getter for RIMFiscalDetailsEOVO2
     */
    public RIMFiscalDetailsEOVOImpl getRIMFiscalDetailsEOVO2() {
        return (RIMFiscalDetailsEOVOImpl)findViewObject("RIMFiscalDetailsEOVO2");
    }


    /**Container's getter for RIMMilestonesEOVO2
     */
    public RIMMilestonesEOVOImpl getRIMMilestonesEOVO2() {
        return (RIMMilestonesEOVOImpl)findViewObject("RIMMilestonesEOVO2");
    }

    /**Container's getter for RIMOtherTeamMembersVO2
     */
    public RIMOtherTeamMembersVOImpl getRIMOtherTeamMembersVO2() {
        return (RIMOtherTeamMembersVOImpl)findViewObject("RIMOtherTeamMembersVO2");
    }

    /**Container's getter for RIMProjImpactEOVO2
     */
    public RIMProjImpactEOVOImpl getRIMProjImpactEOVO2() {
        return (RIMProjImpactEOVOImpl)findViewObject("RIMProjImpactEOVO2");
    }

    /**Container's getter for RIMTeamMembersEOVO2
     */
    public RIMTeamMembersEOVOImpl getRIMTeamMembersEOVO2() {
        return (RIMTeamMembersEOVOImpl)findViewObject("RIMTeamMembersEOVO2");
    }


    /**Container's getter for RIMActionHistoryVO1
     */
    public RIMActionHistoryVOImpl getRIMActionHistoryVO1() {
        return (RIMActionHistoryVOImpl)findViewObject("RIMActionHistoryVO1");
    }
    
    /**Container's getter for RIMFundingEOVO1
     */
    public RIMFundingEOVOImpl getRIMFundingEOVO1() {
        return (RIMFundingEOVOImpl)findViewObject("RIMFundingEOVO1");
    }
    
    /**Container's getter for RIMFundingEOVO2
     */
    public RIMFundingEOVOImpl getRIMFundingEOVO2() {
        return (RIMFundingEOVOImpl)findViewObject("RIMFundingEOVO2");
    }


    /**Container's getter for RIMHeaderSummVO1
     */
    public RIMHeaderSummVOImpl getRIMHeaderSummVO1() {
        return (RIMHeaderSummVOImpl)findViewObject("RIMHeaderSummVO1");
    }

    /**Container's getter for RIMProjectStatusVO1
     */
    public RIMProjectStatusVOImpl getRIMProjectStatusVO1() {
        return (RIMProjectStatusVOImpl)findViewObject("RIMProjectStatusVO1");
    }

    /**Container's getter for RIMMembersVO1
     */
    public RIMMembersVOImpl getRIMMembersVO1() {
        return (RIMMembersVOImpl)findViewObject("RIMMembersVO1");
    }

    /**Container's getter for RIMMainAreaIntEOVO1
     */
    public RIMMainAreaIntEOVOImpl getRIMMainAreaIntEOVO1() {
        return (RIMMainAreaIntEOVOImpl)findViewObject("RIMMainAreaIntEOVO1");
    }

    /**Container's getter for RIMMainAreaIntEOVO2
     */
    public RIMMainAreaIntEOVOImpl getRIMMainAreaIntEOVO2() {
        return (RIMMainAreaIntEOVOImpl)findViewObject("RIMMainAreaIntEOVO2");
    }

    /**Container's getter for RIMMainAreaIntVO1
     */
    public RIMMainAreaIntVOImpl getRIMMainAreaIntVO1() {
        return (RIMMainAreaIntVOImpl)findViewObject("RIMMainAreaIntVO1");
    }

    /**Container's getter for RIMDevGoalEOVO1
     */
    public RIMDevGoalEOVOImpl getRIMDevGoalEOVO1() {
        return (RIMDevGoalEOVOImpl)findViewObject("RIMDevGoalEOVO1");
    }

    /**Container's getter for RIMDevGoalEOVO2
     */
    public RIMDevGoalEOVOImpl getRIMDevGoalEOVO2() {
        return (RIMDevGoalEOVOImpl)findViewObject("RIMDevGoalEOVO2");
    }

    /**Container's getter for RIMHeaderEOVO1
     */
    public RIMHeaderEOVOImpl getRIMHeaderEOVO1() {
        return (RIMHeaderEOVOImpl)findViewObject("RIMHeaderEOVO1");
    }

    /**Container's getter for RIMHeaderEOVO2
     */
    public RIMHeaderEOVOImpl getRIMHeaderEOVO2() {
        return (RIMHeaderEOVOImpl)findViewObject("RIMHeaderEOVO2");
    }

    /**Container's getter for RIMDevGoalVO1
     */
    public RIMDevGoalVOImpl getRIMDevGoalVO1() {
        return (RIMDevGoalVOImpl)findViewObject("RIMDevGoalVO1");
    }

    /**Container's getter for RIMLatestExtVO1
     */
    public RIMLatestExtVOImpl getRIMLatestExtVO1() {
        return (RIMLatestExtVOImpl)findViewObject("RIMLatestExtVO1");
    }


    /**Container's getter for RIMAttachmentEOVO1
     */
    public RIMAttachmentEOVOImpl getRIMAttachmentEOVO1() {
        return (RIMAttachmentEOVOImpl)findViewObject("RIMAttachmentEOVO1");
    }

    /**Container's getter for RIMFundingRevVO1
     */
    public RIMFundingRevVOImpl getRIMFundingRevVO1() {
        return (RIMFundingRevVOImpl)findViewObject("RIMFundingRevVO1");
    }


    /**Container's getter for RIMOtherTeamMembersEOVO1
     */
    public RIMOtherTeamMembersEOVOImpl getRIMOtherTeamMembersEOVO1() {
        return (RIMOtherTeamMembersEOVOImpl)findViewObject("RIMOtherTeamMembersEOVO1");
    }

    /**Container's getter for RIMOtherTeamMembersEOVO2
     */
    public RIMOtherTeamMembersEOVOImpl getRIMOtherTeamMembersEOVO2() {
        return (RIMOtherTeamMembersEOVOImpl)findViewObject("RIMOtherTeamMembersEOVO2");
    }

    /**Container's getter for RIMEndDtExtEOVO2
     */
    public RIMEndDtExtEOVOImpl getRIMEndDtExtEOVO2() {
        return (RIMEndDtExtEOVOImpl)findViewObject("RIMEndDtExtEOVO2");
    }

    /**Container's getter for RIMOldEndDtExtEOVO1
     */
    public RIMOldEndDtExtEOVOImpl getRIMOldEndDtExtEOVO1() {
        return (RIMOldEndDtExtEOVOImpl)findViewObject("RIMOldEndDtExtEOVO1");
    }

    /**Container's getter for RIMEndDtExtEOVO1
     */
    public RIMEndDtExtEOVOImpl getRIMEndDtExtEOVO1() {
        return (RIMEndDtExtEOVOImpl)findViewObject("RIMEndDtExtEOVO1");
    }
}
